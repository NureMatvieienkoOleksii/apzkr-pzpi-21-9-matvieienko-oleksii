





Міністерство освіти і науки
України



Харківський національний
університет радіоелектроніки



 



Факультет комп’ютерних наук



Кафедра програмної інженерії



 



КУРСОВА РОБОТА



ПОЯСНЮВАЛЬНА ЗАПИСКА



з навчальної дисципліни
«Архітектура програмного забезпечення»



Тема роботи: Програмна
система для керування
туристичними маршрутами в парках, лісах, горах, річках та контроль заходів
безпеки оренди та керування дронами



 



Студент гр. ПЗПІ-21-9           
__________________ Матвєєнко О. І.



(підпис)



Керівник роботи                     ___________________
ст.викл. Сокорчук І.П.



(підпис) 



Роботу захищено «__»_________2024 р.



з оцінкою _________________________ 



 



Комісія:                                  ___________________
доц. Лещинський В.О. 



(підпис)



___________________ доц. Лещинська І.О. 



(підпис)



___________________ ст.викл. Сокорчук І.П.



(підпис)



 



 



Харків



2024 р.



Харківський національний університет
радіоелектроніки  



Факультет
комп’ютерних наук Кафедра програмної інженерії     



Спеціальність
121 – Інженерія програмного забезпечення            



Курс                     3                     Семестр                      6                   



Навчальна
дисципліна Архітектура програмного
забезпечення   



 



ЗАВДАННЯ  НА КУРСОВУ РОБОТУ СТУДЕНТОВІ



                                  Матвєєнко
Олексію Івановичу                                  



1. Тема проєкту: Програмна система оренди та
керування дронами



2. Термін узгодження завдання з лабораторних робіт «_12_»_березня_
2024 р.



3. Термін здачі завдання з лабораторних робіт «       »                       2024 р.  



4. Вихідні дані до проєкту: в програмній системі
оренди та керування дронами передбачити: розробку серверної частини, розробку
клієнтської частини, мобільного застосунку та IoT пристрою 



5. Зміст звітів з лабораторних робіт (перелік питань, що
належить розробити):



Vision & Scope, back-end, програмне
забезпечення для IoT пристрою, front-end, мобільний
програмний застосунок.



6. Перелік графічного матеріалу (діаграми, рисунки,
інтерфейси): 



Vision & Scope, Deployment Diagram, Use Case
Diagram, Entity–Relationship Model, State Diagram, Interaction Overview
Diagram, Activity Diagram, Package Diagram, Component Diagram,
Entity–Relationship Model.





КАЛЕНДАРНИЙ ПЛАН



 
  
  
№

  
  
  
Основні етапи виконання
  проєкту в рамках лабораторних робіт

  
  
  
Термін виконання

  
етапів

  
  
  
Примітка

  
 
 
  
  
1

  
  
  
Функціональна
  специфікація 

  
програмного проєкту

  
  
  
12
  квітня 

  
2024
  року

  
  
  
 

  
 
 
  
  
2

  
  
  
Проєктування
  програмного 

  
проєкту

  
  
  
30
  квітня

  
2024
  року

  
  
  
 

  
 
 
  
  
3

  
  
  
Кодування
  програмного проєкту

  
  
  
19
  травня 

  
2024
  року

  
  
  
 

  
 
 
  
  
4

  
  
  
Оформлення
  пояснювальної 

  
записки

  
  
  
30
  травня 

  
2024
  року

  
  
  
 

  
 
 
  
  
5

  
  
  
Захист
  курсової роботи

  
  
  
6
  червня 

  
2024
  року

  
  
  
 

  
 



 



Дата
видачі теми проєкту «__12__»____ березня____2024 р.  



Керівник
                                 ______________ ст.викл. Сокорчук І.П.



(підпис)  



Завдання
прийняв до виконання 



ст.гр.
ПЗПІ-21-9                     
_____________             _Матвєєнко
О.І._ 



         (підпис)





РЕФЕРАТ



 



 



Пояснювальна записка
до курсової роботи: 63 с.,
23 рис., 2 табл., 2 додатки, 5 джерел.



ТУРИСТИЧНІ МАРШРУТИ,
БЕЗПЕКА, ДРОНИ, АВТОМАТИЗАЦІЯ, МОНІТОРИНГ.



Об'єктом
дослідження є туристичні локації (парки, ліси, гори, річки) та фактори, що
впливають на безпеку та комфорт відвідувачів.



Метою проєкту є
розробка програмної системи для керування туристичними маршрутами та контролю
заходів безпеки, включаючи оренду та керування дронами.



Методологія
розробки базується на використанні наступних технологій: MongoDB для зберігання
даних, Node.js для створення серверної частини, React для розробки
користувацького інтерфейсу, а також інтеграція з системами керування дронами.



Програмна
система дозволяє створювати та керувати туристичними маршрутами, відстежувати
місцезнаходження відвідувачів, контролювати оренду та використання дронів для
моніторингу території. Інформація про маршрути, відвідувачів та дрони
зберігається в MongoDB для подальшого аналізу.



Веб-інтерфейс, розроблений на
React, дозволяє адміністраторам у реальному часі відстежувати стан маршрутів,
місцезнаходження туристів та дронів, а також налаштовувати параметри безпеки.







 



ЗМІСТ



 



ВСТУП......................................................................................................................7



1 АНАЛІЗ ПРЕДМЕТНОЇ
ОБЛАСТІ.....................................................................9



1.1
Бізнес-вимоги.....................................................................................................9



  1.1.1 Бізнес можливості........................................................................................9



  1.1.2 Бізнес-цілі
та критерії успіху.....................................................................10



  1.1.3 Потреби
клієнтів або ринку.......................................................................11



  1.1.4
Бізнес-ризики..............................................................................................12



1.2 Концепція
рішення..........................................................................................14



  1.2.1 Окреслення
концепції................................................................................14



  1.2.2 Головна
функціональність.........................................................................16



  1.2.3 Припущення
та залежності........................................................................16



1.3 Рамки та обмеження
проєкту..........................................................................17



  1.3.1 Рамки
первинного випуску........................................................................17



  1.3.2 Рамки
наступних випусків.........................................................................19



  1.3.3 Обмеження
та винятки...............................................................................20



1.4
Бізнес-контекст.................................................................................................21



  1.4.1 Профілі
зацікавлених сторін......................................................................21



  1.4.2 Пріоритети
проекту....................................................................................23



  1.4.3 Робоче
середовище.....................................................................................25



2 ПОСТАНОВКА
ЗАДАЧІ....................................................................................26



3 ПРОЕКТУВАННЯ ПРОГРАМНОГО
ПРОЕКТУ.............................................28



  3.1 Проектування
серверної частини проекту...................................................28



  3.2 Проектування
IoT-частини системи.............................................................31



  3.3 Проектування
клієнтської частини проекту................................................32



4 РЕАЛІЗАЦІЯ ПРОГРАМНОЇ
СИСТЕМИ.......................................................43



4.1 Архітектура та розробка серверної частини.................................................43



 
4.1.1 Створення API для використання дронів.................................................47



 
4.1.2 Розробка API для керування операторами дронів...................................48



 
4.1.3 Створення API для керування природними умовами..............................49



4.2 Архітектура та розробка IoT
частини............................................................50



4.3 Архітектура та розробка web
частини...........................................................51



ВИСНОВКИ...........................................................................................................56



ПЕРЕЛІК ДЖЕРЕЛ
ПОСИЛАННЯ.....................................................................58



ДОДАТОК
А...........................................................................................................59





ДОДАТОК Б...........................................................................................................65



 







ВСТУП



 



 



У сучасному світі все більше
людей прагнуть до активного відпочинку на природі, досліджуючи мальовничі
ландшафти парків, лісів, гір та річок. Однак організація безпечних та
ефективних туристичних маршрутів вимагає ретельного планування та контролю.
Крім того, зростаюча популярність використання дронів для зйомки та моніторингу
створює нові можливості та виклики в галузі туризму.



Сучасні технології дозволяють
створити комплексну програмну систему для керування туристичними маршрутами та
контролю заходів безпеки при використанні дронів. Така система може значно
підвищити якість обслуговування туристів, забезпечити їх безпеку та
оптимізувати роботу туристичних організацій.



Неефективне управління
туристичними маршрутами може призвести до перевантаження популярних місць,
погіршення стану природних об'єктів та зниження задоволеності відвідувачів.
Крім того, неконтрольоване використання дронів може порушувати приватність
туристів, створювати небезпечні ситуації та завдавати шкоди навколишньому
середовищу.



Впровадження інтелектуальної
системи керування дозволить оптимізувати потоки туристів, забезпечити їх
безпеку та мінімізувати негативний вплив на природу. Автоматизований контроль
за використанням дронів допоможе уникнути потенційних проблем та максимально
ефективно використовувати їх можливості для покращення туристичного досвіду.



Таким чином, існує потреба у
створенні програмної системи, яка об'єднає функції планування та контролю
туристичних маршрутів з управлінням безпечним використанням дронів. Ця система
буде збирати та аналізувати дані про популярність маршрутів, погодні умови,
стан природних об'єктів та інші важливі фактори.



Використовуючи алгоритми
машинного навчання, система зможе прогнозувати оптимальні маршрути, розподіляти
туристичні потоки та надавати рекомендації щодо безпечного використання дронів
у різних умовах. Це дозволить індивідуально підходити до потреб кожного
туриста, забезпечуючи максимальну безпеку та задоволення від подорожі.



Основною метою проекту є
розробка інтелектуальної системи, яка автоматизує процеси керування
туристичними маршрутами та використанням дронів, підвищуючи якість та безпеку
туристичних послуг, а також сприяючи збереженню природних ресурсів.







 



1     АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ



1.1           
Бізнес-вимоги



1.1.1     Бізнес можливості



 



При аналізі ринку програмних систем для керування
туристичними маршрутами в парках, лісах, горах, річках та контроль заходів
безпеки виділяються три провідні бренди, які пропонують схожі послуги та
функціонал:



-        AllTrails: AllTrails
пропонує детальні карти та маршрути для пішохідних турів. Однак, серед
недоліків AllTrails можна виділити відсутність інтеграції з системами безпеки. 



-        Komoot:
Komoot зосереджений на плануванні велосипедних маршрутів. Головним недоліком є
обмежена функціональність для інших типів туризму.



-        ViewRanger:
ViewRanger пропонує GPS-навігацію для активного відпочинку, але має високу
вартість преміум-функцій.



-         Дана
програмна система керування туристичними маршрутами в парках, лісах, горах,
річках та контроль заходів безпеки буде розроблена для забезпечення ефективного
планування, моніторингу та управління туристичними маршрутами, враховуючи
безпеку користувачів.



 



 



1.1.2     Бізнес-цілі та критерії успіху



 



 



БЦ-1: Розширення географічного
охоплення:



-        Створення
бази даних туристичних маршрутів у щонайменше п'яти регіонах України.



-        Укладення
партнерських угод з національними парками та туристичними агентствами.



БЦ-2: Покращення функціональності та
сервісу:



-        Впровадження
функцій моніторингу безпеки та оповіщення про надзвичайні ситуації.



-        Забезпечення
інтеграції з мобільними додатками для зручного планування маршрутів.



БЦ-3: Залучення нових клієнтів та
ринкове позиціонування:



-        Привернення
500 нових користувачів протягом першого року.



-        Збільшення
обсягів використання системи на 40% за рахунок маркетингових кампаній.



 



КУ-1: Задоволеність клієнтів та
партнерів:



-        Досягнення
рівня задоволеності клієнтів не менше 90% на основі їхнього фідбеку та
відгуків.



-        Успішне
встановлення партнерських відносин з не менше ніж 10 ключовими гравцями у сфері
туризму та безпеки.



КУ-2: Успішність використання
продукту:



-        Забезпечення
стабільної роботи системи керування туристичними маршрутами для не менше 95%
користувачів.



-        Інтеграція
програмної системи з існуючими платформами керування туристичними маршрутами у
не менше ніж 80% випадків.



КУ-3: Ефективність та
результативність системи:



-        Забезпечення
точного моніторингу маршрутів та оповіщення про небезпеки з точністю не менше
90%, включаючи виявлення зсувів, повеней та інших природних явищ.



Досягнення рівня безпеки, що
дозволить знизити кількість інцидентів на маршрутах на 20% протягом першого
року використання системи завдяки своєчасним оповіщенням та інтеграції з
рятувальними службами.



 



 



1.1.3     Потреби клієнтів або ринку



 



 



У сфері керування туристичними
маршрутами в парках, лісах, горах та річках виявлено наступні потреби та вимоги
клієнтів:



-        Потреба
в детальному плануванні маршрутів: Клієнти очікують від системи можливості
детального планування маршрутів з урахуванням різних типів активності, таких як
піші походи, велосипедні тури, гірські сходження та водні маршрути. Вони хочуть
мати доступ до інтерактивних карт з позначенням визначних місць, джерел води,
місць для кемпінгу та інших важливих точок.



-        Зручність
у використанні та доступ до актуальної інформації: Клієнти прагнуть мати
інтуїтивно зрозумілі інтерфейси для планування та навігації маршрутами. Вони
потребують зручного доступу до актуальної інформації про погодні умови,
небезпеки на маршруті та рекомендації від інших туристів. Це допоможе їм
приймати обґрунтовані рішення під час подорожей.



-        Безпека
та оповіщення про надзвичайні ситуації: Клієнти вимагають від системи
можливості моніторингу безпеки на маршрутах, включаючи оповіщення про погодні
умови, небезпеки, такі як зсуви, повені, пожежі, та інші надзвичайні ситуації.
Вони очікують інтеграції з місцевими рятувальними службами для швидкого
реагування у разі необхідності.



-        Соціальна
взаємодія та обмін досвідом: Клієнти шукають можливість обміну досвідом та
відгуками між користувачами системи. Вони хочуть мати платформу для спільного
планування маршрутів, створення групових подорожей та отримання рекомендацій
від інших туристів. Це підвищить їхню залученість та задоволеність
використанням системи.



-        Технічна
підтримка та надійність системи: Клієнти очікують наявності ефективної
технічної підтримки та сервісу з боку постачальника системи. Вони потребують
професійного консультативного супроводу для вирішення технічних питань та
забезпечення надійної роботи системи в будь-яких умовах.



 



 



1.1.4     Бізнес-ризики



 



 



Технічні виклики:



-        Існує загроза технічних проблем, які
можуть виникнути в процесі експлуатації системи керування туристичними
маршрутами, таких як збої в програмному забезпеченні, проблеми з GPS-навігацією або некоректне відображення карт та
маршрутів.



Обмежений попит на ринку:



-        Існує
ризик обмеженого попиту на ринку через недостатню обізнаність громадськості
щодо можливостей системи керування туристичними маршрутами та її переваг для
безпеки та планування подорожей.



Конкурентна боротьба:



-        Ризик
конкуренції з іншими компаніями, які пропонують аналогічні послуги, такі як
додатки для туристів та платформи для планування маршрутів, що може призвести
до втрати частки на ринку або необхідності інвестувати у збільшення
конкурентоспроможності.



Фінансові загрози:



-        Ризик
обмежених фінансових ресурсів для розробки, маркетингу та підтримки системи
керування туристичними маршрутами, що може вплинути на її розвиток,
ефективність та конкурентоспроможність на ринку.



Правові та регуляторні виклики:



-        Існує
ризик змін у законодавстві або регулюванні, що може вплинути на роботу системи,
зокрема щодо захисту даних користувачів та вимог до безпеки на туристичних
маршрутах.







 



1.2           
Концепція рішення



1.2.1     Окреслення концепції



 



 



Програмна система керування туристичними
маршрутами в парках, лісах, горах, річках та контроль заходів безпеки є
ключовим інструментом для організації та безпечного проведення активного
відпочинку на природі. Основна мета цієї системи – надати користувачам зручний
та надійний інструмент для планування маршрутів, моніторингу умов на місцевості
та забезпечення їх безпеки під час подорожей.



Головні переваги даної системи полягають у
можливості інтерактивного планування маршрутів, моніторингу реального часу та оперативного
реагування на надзвичайні ситуації. Система забезпечує детальні інтерактивні
карти з інформацією про визначні місця, місця для кемпінгу, джерела води та
інші важливі точки, а також сповіщення про зміни погодних умов та потенційні
небезпеки.



Впровадження програмної системи керування
туристичними маршрутами допоможе користувачам досягти нових рівнів безпеки та
зручності під час активного відпочинку. Вони зможуть планувати свої подорожі,
отримувати рекомендації від інших туристів, слідкувати за станом маршруту та
оперативно реагувати на зміни ситуації. Крім того, система забезпечує
можливість інтеграції з місцевими рятувальними службами для швидкого реагування
на надзвичайні ситуації.



Дана програмна система керування туристичними
маршрутами є інноваційним рішенням, яке дозволить користувачам оптимізувати
процеси планування та проведення подорожей, забезпечить їхню безпеку та надасть
конкурентну перевагу на ринку активного туризму.





1.2.2     Головна функціональність



 



 



MF-1: Реєстрація та авторизація.



MF-2: Планування та управління туристичними маршрутами.



MF-3: Моніторинг умов на маршруті в реальному часі.



MF-4: Інтерактивні карти та навігація.



MF-5: Сповіщення про небезпеки та надзвичайні ситуації.



MF-6: Інтеграція з рятувальними службами.



MF-7: Соціальна взаємодія та обмін досвідом.



MF-8: Веб-портал та мобільний додаток.



MF-9: Аналіз даних та генерація звітів.



MF-10: Оновлення програмного забезпечення та виправлення помилок.



 



 



1.2.3     Припущення та залежності



 



 



Припущення №1:
Туристичні маршрути, запропоновані системою, мають бути безпечними та
доступними для користувачів, щоб забезпечити успішне проведення подорожей. Це
означає, що інформація про маршрути має бути актуальною і враховувати всі
можливі зміни умов на місцевості.



Припущення №2:
Користувачі системи повинні мати доступ до необхідного обладнання, такого як
смартфони або GPS-пристрої, а також базові навички орієнтування на місцевості
та користування системою. 



Припущення №3:
Система повинна забезпечувати безперебійний доступ до необхідних ресурсів,
таких як мобільний інтернет та електроенергія, для нормальної роботи додатків
та отримання актуальної інформації. Це включає забезпечення доступу до мережі в
зонах покриття та можливість заряджання пристроїв у польових умовах.



 



Залежність №1: Для
кожного типу туристичної активності необхідно визначити відповідні маршрути та
налаштування системи для досягнення оптимальних результатів.



Залежність №2:
Ефективне керування туристичними маршрутами залежить від правильного вибору
програмного забезпечення та технічної підтримки, які забезпечуються системою.
Це включає своєчасні оновлення програмного забезпечення та можливість отримання
допомоги у разі технічних проблем.



Залежність №3:
Користувачі повинні мати доступ до навчальних матеріалів та консультацій з
експертами для вирішення технічних питань та оптимізації використання системи
під час планування та проведення подорожей.



 



1.3           
Рамки та обмеження
проєкту



1.3.1     Рамки первинного випуску



 



 



Програмне забезпечення серверної частини системи:



-        Управління
базою даних для зберігання інформації про користувачів, маршрути, туристичні
точки, безпекові заходи та історію використання системи;



-        Обробка
запитів від веб-застосунку та мобільного додатку, включаючи авторизацію,
перегляд даних, планування маршрутів та отримання сповіщень;



-        забезпечення
безпеки даних та конфіденційності інформації, що зберігається та обробляється в
системі.



Програмне забезпечення пристроя IoT:



-        Підключення
сенсорів та інших IoT пристроїв для моніторингу умов на маршруті (температура,
вологість, рівень води тощо) та передачі даних до системи.



Веб застосунок:



-        Реєстрація
та авторизація;



-        Перегляд
даних про туристичні маршрути, включаючи карти, опис місць та умови на
маршруті;



-        Планування
та налаштування туристичних маршрутів з урахуванням особистих уподобань;



-        Перегляд
історії подорожей та користувацьких відгуків;



-        Налаштування
основних параметрів системи відповідно до власних потреб та обмежень.



Програмний застосунок для мобільного пристроя:



-        Реєстрація
та авторизація;



-        Перегляд
даних про туристичні маршрути, включаючи карти, опис місць та умови на
маршруті;



-        Планування
та налаштування туристичних маршрутів з урахуванням особистих уподобань;



-        Перегляд
історії подорожей та користувацьких відгуків;



-        Налаштування
основних параметрів системи відповідно до власних потреб та обмежень.



MF-1: Реєстрація та авторизація 



Користувачі зможуть увійти до свого акаунту за допомого
логіна та паролю.



MF-2: Планування та управління туристичними маршрутами



Користувачі можуть планувати маршрути через веб-сайт або
мобільний додаток. Вони мають можливість вибрати тип маршруту, тривалість
подорожі та необхідні опції.



MF-5: Автоматизований аналіз зібраних даних та генерація
звітів



Система автоматично аналізує дані, отримані від сенсорів
та інших пристроїв, і генерує звіти з використанням різних параметрів.
Користувачі можуть отримати звіти про стан маршрутів та умови подорожі.



MF-6: Сповіщення про небезпеки та надзвичайні ситуації



Система буде автоматично сповіщати користувачів про
наближення небезпек, таких як зсуви, повені, пожежі, та інші надзвичайні
ситуації.



MF-9 Можливість перегляду та аналізу зібраних даних через
веб-портал або мобільний додаток



Система дозволяє користувачам переглядати матеріали
необхідного формату, зібрані сенсорами та іншими пристроями, за допомогою
зовнішніх пристроїв чи додатків.



Ці функції є ключовими для першого випуску системи
керування туристичними маршрутами та забезпечують користувачам зручний та
ефективний спосіб планування і проведення подорожей.



 



 



1.3.2     Рамки наступних випусків



 



 



У веб-застосунку користувачі матимуть можливість:



- Автоматично налаштовувати маршрути на основі зібраних
даних про попередні подорожі та умови на маршрутах.



- Встановлювати межі та параметри безпечних зон для
подорожей з урахуванням поточних умов.



- Переглядати дані маршрутів, включаючи інформацію про
погоду, стан доріг та безпекові умови.



Адміністратор у веб-застосунку матиме можливість:



- Відповідати на запитання користувачів та надавати їм підтримку
з використання системи.



У мобільному додатку користувачі також матимуть
можливість:



- Налаштовувати маршрути та місцезнаходження через
мобільний додаток, використовуючи GPS та інші технології для точного
планування..



- Встановлювати межі безпечної зони для польотів дронів
на мобільному пристрої.



- Переглядати дані маршрутів, включаючи інформацію про
погоду, стан доріг та безпекові умови.



МF-3: Моніторинг умов на маршруті у реальному часі



MF-4: Інтерактивні карти та навігація



MF-7: Інтеграція з рятувальними службами



MF-8: Соціальна взаємодія та обмін досвідом



MF-10: Оновлення програмного забезпечення та виправлення
помилок.



 



 



1.3.3     Обмеження та винятки



 



 



При використанні системи управління туристичними
маршрутами варто враховувати такі обмеження та винятки:



-        Доступність
маршрутів: Деякі маршрути можуть бути недоступними через закриття територій,
сезонні обмеження або природні катастрофи. Користувачі повинні перевіряти
актуальну інформацію про доступність маршрутів перед плануванням подорожі.



-        Обмеження
транспортних засобів: Деякі маршрути можуть мати обмеження щодо типів
транспортних засобів, які можуть бути використані, такі як автомобілі,
велосипеди або піший туризм. Важливо враховувати ці обмеження для безпеки та
відповідності вимогам маршруту.



-        Перешкоди
на маршруті: Перешкоди, такі як непрохідні ділянки, ремонти доріг, будівельні
роботи або природні бар'єри (річки, гори), можуть ускладнити або зробити
неможливим проходження певних ділянок маршруту. Користувачі повинні бути готові
до таких перешкод та планувати альтернативні маршрути.



-        Погодні
умови: Негативні погодні умови, такі як сильний дощ, сніг, туман або висока
температура, можуть ускладнити або зробити небезпечним проходження маршрутів.
Користувачам слід враховувати прогноз погоди та уникати подорожей у
несприятливих умовах.



-        Залежність
від мобільного зв'язку та інтернету: Деякі функції системи, такі як
GPS-навігація, доступ до карт та отримання сповіщень, можуть бути залежними від
мобільного зв'язку та інтернету. Відсутність зв'язку може обмежити
функціональність системи та вимагати завчасного завантаження необхідних даних.



-        Безпека та
здоров'я: Учасники подорожей повинні дотримуватися заходів безпеки та
враховувати свої фізичні можливості при виборі маршрутів. Складні або
екстремальні маршрути можуть вимагати спеціальної підготовки та спорядження.



 



1.4            
Бізнес-контекст



1.4.1      Профілі зацікавлених сторін



 



 



Профілі зацікавлених
сторін проекту наведені в таблиці 1.1.



Таблиця 1.1 – Профілі зацікавлених сторін проєкту



 
  
  
Показник

  
  
  
Виконання (етапи)

  
  
  
Обмеження (граничні значення)

  
  
  
Ступінь свободи (допустимий діапазон)

  
 
 
  
  
План робіт

  
  
  
Продукт має бути випущеним до 20.07.2024

  
  
  
  
Можливе відхилення від графіку на 1-2 місяців

  
 
 
  
  
Функціональність

  
  
  
  
  
100% функціоналу має працювати на
  релізі 1.0

  
 
 
  
  
Якість

  
  
  
  
  
Точність побудови маршрутів повинна бути не менше 90%

  
 
 
  
  
Персонал

  
  
  
  
Максимальний розмір команди це 2
  розробники та адміністратор

  
  
 
 
  
  
Ціна

  
  
  
  
≈ 20 000 гривень

  
  
  
Допустиме відхилення на 15%

  
 



 



 



 



 



1.4.2     Пріоритети проекту



 



 



Пріоритети проєкту наведені в таблиці 1.2. 



 



Таблиця 1.2 – Пріоритети проєкту



 
  
  
Показник

  
  
  
Виконання (етапи)

  
  
  
Обмеження (граничні
  значення)

  
  
  
Ступінь свободи (допустимий діапазон)

  
 
 
  
  
План робіт

  
  
  
Продукт має бути
  випущеним до 20.07.2024

  
  
  
  
Можливе відхилення від графіку на 1-2 місяців

  
 
 
  
  
Функціональність

  
  
  
  
  
100% функціоналу має працювати на
  релізі 1.0

  
 
 
  
  
Якість

  
  
  
  
  
Точність побудови маршрутів повинна бути не менше 90%

  
 
 
  
  
Персонал

  
  
  
  
Максимальний розмір
  команди це 2 розробники та адміністратор

  
  
 
 
  
  
Ціна

  
  
  
  
≈ 20 000
  гривень

  
  
  
Допустиме відхилення на 15%

  
 



 



 



1.4.3     Робоче середовище



 



 



Бекенд системи керування туристичними
маршрутами та дронами буде реалізований з використанням платформи Node.js [1],
яка забезпечує високу продуктивність та масштабованість для обробки великої
кількості запитів від користувачів та пристроїв. Для зберігання даних про
маршрути, туристів, дрони та інші релевантні відомості буде використовуватися
нереляційна база даних MongoDB [2], що дозволить гнучко працювати з
різноманітними структурами даних та забезпечить високу швидкість доступу до
інформації.



Фронтенд системи буде створений з
використанням бібліотеки React [3] для побудови інтерактивного та адаптивного
користувацького інтерфейсу. Це дозволить створити зручний веб-додаток для
туристів та операторів системи, який буде однаково добре працювати на різних
пристроях - від смартфонів до настільних комп'ютерів. Для стилізації інтерфейсу
та забезпечення привабливого дизайну буде використано CSS-фреймворк Tailwind
[4].



Система буде обробляти дані з різних
джерел, включаючи GPS-трекери туристів, метеорологічні датчики, телеметрію
дронів та інформацію про стан природних об'єктів. Для аналізу цих даних та
генерації оптимальних маршрутів будуть використовуватися алгоритми машинного
навчання, реалізовані за допомогою бібліотеки TensorFlow.js [5], що дозволить
виконувати складні обчислення безпосередньо у браузері користувача.



 



Для забезпечення безперебійної роботи
та високої доступності системи планується використовувати хмарну
інфраструктуру, таку як Amazon Web Services (AWS) або Google Cloud Platform
(GCP). Це дозволить легко масштабувати систему в залежності від навантаження та
забезпечити надійне зберігання даних.



Додатково буде розроблений мобільний
додаток для операційних систем iOS та Android з використанням фреймворку React
Native [6]. Це дозволить туристам та операторам дронів отримувати актуальну
інформацію про маршрути, погодні умови та стан дронів безпосередньо на своїх
мобільних пристроях, навіть у віддалених локаціях..







 



2         
ПОСТАНОВКА ЗАДАЧІ



 



 



За результатами попереднього аналізу
предметної області, завданням проєкту було поставлено створення програмної
системи для керування туристичними маршрутами в природних зонах та контролю
використання дронів.



База даних повинна включати
інформацію про: туристів, маршрути, дрони, операторів дронів, природні об'єкти
та погодні умови.



Для туриста має бути
реалізований такий функціонал:



а) реєстрація та вхід
в систему;



б) перегляд доступних
маршрутів та їх детальний опис;



в) бронювання
маршрутів та отримання QR-коду для доступу;



г) відстеження свого
місцезнаходження на маршруті в реальному часі;



ґ) отримання
сповіщень про погодні умови та потенційні небезпеки;



д) можливість
викликати допомогу в екстрених ситуаціях.



Для
оператора дрона має бути реалізований такий функціонал:



а)
реєстрація та вхід в систему;



б)
перегляд зон, дозволених для польотів дронів;



в)
планування маршрутів польоту дрона;



г)
моніторинг стану дрона та його телеметрії в реальному часі;



ґ)
отримання сповіщень про погодні умови та обмеження польотів;



д)
завантаження та обробка відзнятих матеріалів.



Для
адміністратора системи має бути реалізований такий функціонал:



а)
керування користувачами системи та їх правами;



б)
створення та редагування туристичних маршрутів;



в)
моніторинг розташування туристів та дронів в реальному часі;



г)
встановлення обмежень на використання дронів у певних зонах;



ґ)
аналіз статистики відвідувань та використання дронів;



д)
керування інтеграціями з метеорологічними сервісами та системами безпеки.



Програмна система
повинна підтримувати роботу з GPS-трекерами туристів, телеметрією дронів та
метеодатчиками, забезпечуючи їх безперебійне підключення через різні протоколи
зв'язку.



Система повинна
підтримувати локалізацію та інтернаціоналізацію, включаючи: різні мови
інтерфейсу, формати дати та часу, системи вимірювання (метрична та імперська),
різні валюти для оплати послуг, адаптацію контенту до культурних особливостей
різних країн.



Серверна частина
системи має бути реалізована з використанням Node.js та MongoDB, а клієнтська
частина - з використанням React. Система повинна забезпечувати високу
продуктивність та надійність при обробці даних в режимі реального часу, а також
мати можливість працювати в умовах обмеженого доступу до мережі Інтернет.







3                  
ПРОЕКТУВАННЯ
ПРОГРАМНОГО ПРОЕКТУ



3.1           
Проектування
серверної частини проекту



 



 



На початковому етапі розробки було
визначено та описано ключові сутності системи для реалізації запланованого
функціоналу. Для цього була створена ER-модель даних, яка візуалізує всі
сутності та зв'язки між ними (див. рис. Б.1 у додатку Б):



Модель даних включає наступні основні
сутності та їх ключові атрибути: 



а) користувач:



1)      користувач_id;



2)      ім’я;



3)      прізвище;



4)      пошта;



5)      пароль;



6)      номер
телефону;



7)      роль;



8)      дата народження;



9)      адреса;



10)    дата реєстрації;



11)     дата останньої авторизації;



12)    статус; 



б) турист:



1)      турист_id;



2)      користувач_id;



3)      вподобання;



4)      контакт для
екстрених випадків;



5)      медична інформація;



6)      минулі подорожі;



в) оператор_дрона:



1)      оператор_дрона _id;



2)      користувач_id;



3)      ліцензія;



4)      досвід;



5)      спеціалізації;



6)      призначені дрони;



г) адміністратор:



1)      адміністратор_id;



2)      користувач_id;



3)      рівень
адміністратора;



4)      відділ;



5)      дозволи;



д) маршрут:



1)      маршрут_id;



2)      назва;



3)      опис;



4)      складність;



5)      тривалість;



6)      тип
місцевості;



7)      продуктивність;



е) точка_маршрут:



1)      точка_маршрут_id;



2)      маршрут_id;



3)      порядковий номер;



4)      широта;



5)      довгота;



6)      опис;



є)
бронювання:



1)      бронювання_id;



2)      користувач_id;



3)      маршрут_id;



4)      дата початку;



5)      дата
завершення;



6)      статус;



ж)
дрон:



1)      дрон_id;



2)      модель;



3)      серійний
номер;



4)      статус;



5)      максимальний
час польоту;



6)      максимальна дальність;



з)
політ дрона:



1)      політ_дрона_id;



2)      дрон_id;



3)      користувач_id;



4)      дата
та час початку;



5)      дата
та час завершення;



6)      маршрут польоту;



и)
заходи безпеки:



1)      захід_id;



2)      ідентифікатор
пов'язаного об'єкта;



3)      опис;



4)      чи
обов'язковий;



і)
природні умови:



1)      умови_id;



2)      ідентифікатор
маршруту;



3)      дата;



4)      погодні
умови;



5)      рівень
води;



6)      температура;



7)      додаткова
інформація;



ї)
гід:



1)      гід_id;



2)      користувач_id;



3)      спеціалізації;



4)      мови;



5)      досвід;



6)      сертифікати;



7)      доступність;



8)      рейтинг.



 



 



Ці
сутності та їх атрибути забезпечують всю необхідну інформацію для реалізації запланованого
функціоналу системи. Далі були визначені основні сценарії використання системи.
Функціонал розподілений між чотирма типами користувачів: Гід, Турист, Оператор
дрона та Адміністратор.



Гід
має можливість створювати та редагувати маршрути, проводити екскурсії, надавати
інформацію про природні умови та заходи безпеки, а також взаємодіяти з
туристами під час подорожей.



Турист
може бронювати маршрути, переглядати деталі маршрутів, отримувати інформацію
про погодні умови та заходи безпеки, а також залишати відгуки про пройдені
маршрути та роботу гідів.



Оператор
дрона може планувати польоти дронів, керувати дронами під час польоту,
завантажувати та обробляти відзняті матеріали, а також надавати інформацію про
стан місцевості та потенційні небезпеки.



Адміністратор
має повний доступ до системи, включаючи керування користувачами, маршрутами,
дронами та всіма даними системи. Він також відповідає за загальну координацію
роботи та вирішення конфліктних ситуацій.



На
основі представлених сценаріїв використання була створена UML діаграма
прецедентів (див. рис. Б.2 у додатку Б).



Взаємодія
між серверною і клієнтською частинами, а також з мобільними додатками та
дронами, реалізована за допомогою REST API. Це забезпечує гнучку структуру
взаємодії та дозволяє легко масштабувати систему. Більш детальна інформація про
взаємодію різних компонентів системи представлена на UML-діаграмі розгортання
(див. рис. 3.1).



Таким
чином, в результаті концептуального моделювання предметної області, були
визначені основні сутності програмної системи, їх атрибути, та створені
ER-модель та діаграма прецедентів, які відображають структуру та
функціональність системи керування туристичними маршрутами та дронами. Ця
модель даних забезпечує надійну основу для подальшої розробки та впровадження
системи, враховуючи потреби всіх типів користувачів та специфіку роботи з
природними об'єктами та безпілотними літальними апаратами.



 




 
 
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 

 




Рисунок 3.1 –
Діаграма розгортання (Deployment Diagram)



 



Для демонстрації основного функціоналу, а саме моніторингу
мікроклімату та його впливу на продуктивність працівників, була розроблена
діаграма активності (див. рис. 3.2). Вона відображає головні дії та етапи, які
здійснюють менеджери та адміністратори системи для досягнення мети. 



 




 




Рис. 3.2 – UML діаграма
активності



 



Розглянемо
діаграму активності (Activity diagram), зображену на рисунку 3.3. В даній
діаграмі відображений алгоритм роботи IoT пристроїв для збору даних про
туристичні маршрути та навколишнє середовище, а також їх взаємодію з системою керування
маршрутами.



 



3.2           
Проектування IoT-частини
системи



 



IoT частина
розробленої системи взаємодіє з фізичним середовищем парків, лісів, гір та
річок, вимірюючи параметри навколишнього середовища. Пристрої вимірюють
температуру, вологість, рівень CO2, швидкість вітру та інші показники, після
чого відправляють дані на сервер. Ці дані потім аналізуються системою та
надаються менеджерам для оцінки безпеки маршрутів та планування туристичних
активностей. Ця взаємодія представлена на діаграмі прецедентів (див. рис. 3.3).



 




 




Рисунок 3.3 – UML
діаграма прецедентів IoT частини системи



 



З цією діаграмою були визначені основні вимоги до IoT
частини проекту.



 



 



3.3            
Проектування клієнтської
частини проекту





 



 



Системою
користуються чотири типи акторів: турист, гід, оператор дрону та адміністратор.
Під час першого використання система дозволяє туристу лише переглядати загальну
інформацію про доступні маршрути та природні об'єкти. Для доступу до
розширеного функціоналу турист повинен авторизуватися в системі.



Гід
може переглядати детальну інформацію про маршрути, керувати групами туристів, а
також аналізувати дані про безпеку та стан маршрутів. Оператор дрону має доступ
до функцій керування дронами, моніторингу території та збору даних з повітря.
Адміністратор має повний доступ до функціоналу та інформації в системі, включаючи
керування користувачами, конфігурацією обладнання, а також може експортувати
дані та створювати резервні копії бази даних.



Щоб відобразити дані сценарії було створено UML
діаграму прецедентів (див. рис. Б.2 у додатку Б).



Загалом клієнтська частина складається наступних
компонентів:



а)                
Реєстрація:



1)     
Користувачі можуть зареєструватися на сайті.



б)               
Вхід.



1)     
Користувачі
автентифікуються в системі, вводячи свої облікові дані.



Програмна система складається з таких
основних частин для кожного типу:



в)                
Функціонал для гіда:



1)     
Огляд топографії та
особливостей маршрутів.



2)     
Координація туристичних
груп.



3)     
Оцінка ризиків та
безпеки трас.



4)     
Розробка
експедиційних планів.



5)     
Аналіз
метеорологічних прогнозів.



6)     
Зв'язок з
мандрівниками через платформу.



7)     
Прийом екстрених
сповіщень.



г)                
Функціонал оператору
дрона:



1)     
Управління безпілотними
апаратами.



2)      Аерофотозйомка
та розвідка місцевості.



3)      Обробка
та інтерпретація даних з дронів.



4)      Проектування
повітряних маршрутів.



5)      Діагностика
та обслуговування БПЛА.



6)      Взаємодія з наземними службами.



д)               
Функціонал системного
адміністратора:



1)  Повний доступ до функцій гіда та пілота.



                   2)  Управління
обліковими записами.



                   3)  Реєстрація
нових учасників системи.



                   4)  Конфігурація
рівнів доступу.



                   5)  Адміністрування
IoT-інфраструктури.



                   6)  Резервне
копіювання та архівація даних.



                   7)  Аналітика
використання платформи.



                   8)  Координація
заходів безпеки.



е)      Функціонал туриста:



1)  Перегляд каталогу маршрутів.



                   2)  Резервування
турів.



                   3)  Доступ
до метеоданих та попереджень.



                   4)  GPS-навігація
на маршруті.



                   5)  Месенджер
для зв'язку з гідом.



                   6)  Інтерактивний
гід по природних пам'ятках.



                   7)  Система
відгуків та рейтингів подорожей.







 



4         
РЕАЛІЗАЦІЯ ПРОГРАМНОЇ
СИСТЕМИ



4.1  
Архітектура та
розробка серверної частини





 



Для розробки
серверної частини системи керування туристичними маршрутами та дронами було
обрано платформу Node.js з використанням фреймворку Express. Цей вибір
зумовлений високою продуктивністю Node.js, його здатністю ефективно обробляти
асинхронні операції та великою кількістю доступних бібліотек. Express
забезпечує швидку розробку RESTful веб-сервісів з гнучкими можливостями для
маршрутизації та обробки запитів.



Система побудована на
основі архітектури REST (Representational State Transfer). Ця архітектура
забезпечує чітке розділення відповідальності між клієнтом та сервером, що
полегшує розробку, тестування та масштабування системи. У контексті системи
керування туристичними маршрутами та дронами, це дозволяє ефективно обробляти
запити від різних клієнтів (наприклад, мобільних додатків туристів, інтерфейсів
операторів дронів та адміністративних панелей) та надавати відповідні дані про
маршрути, бронювання, польоти дронів та природні умови.



Для зберігання даних
було обрано MongoDB. Ця потужна нереляційна база даних забезпечує гнучке та
масштабоване зберігання інформації про користувачів, маршрути, дрони та інші
релевантні дані. MongoDB надає широкі можливості для складних запитів та
аналізу даних, що критично важливо для системи управління туристичними
послугами та моніторингу безпеки.



Проєкт має наступну
структуру:



а)       Каталог models:



1) Файл user.js, який описує сутність моделі користувача;



2) Файл tourist.js, який описує сутність моделі туриста;



3) Файл droneOperator.js, який описує сутність моделі оператора дрона;



4) Файл admin.js, який описує сутність моделі адміністратора;



5) Файл route.js, який описує сутність моделі маршруту;



6) Файл booking.js, який описує сутність моделі бронювання;



7)
Файл drone.js, який описує сутність
моделі дрона;



8)
Файл droneFlight.js, який описує сутність
моделі польоту дрона;



б)      Каталог routers:



1) Файл auth.js, де описуються ендпоінти для авторизації
та реєстрації;



2) Файл routes.js, де описуються ендпоінти для роботи з
туристичними маршрутами;



3) Файл bookings.js, де описуються ендпоінти для
бронювання маршрутів;



4)
Файл drones.js, де описуються ендпоінти
для керування дронами;



5)
Файл admin.js, де описуються
ендпоінти, доступні адміністратору;



Специфікація основного REST API та функцій,
які взаємодіють з веб-сервісами, наведена нижче в таблиці 4.1.



 



 



 



 



 



 



 



Таблиця 4.1 -
Специфікація базового REST API серверної частини системи



 
  
  
Сутність

  
  
  
Метод

  
  
  
Посилання

  
  
  
Дія

  
 
 
  
  
Користувачі

  
  
  
GET

  
  
  
/api/users

  
  
  
Отримати список користувачів

  
 
 
  
  
/api/users/:id

  
  
  
Отримати
  інформацію про користувача

  
 
 
  
  
POST

  
  
  
/api/users

  
  
  
Створити нового користувача

  
 
 
  
  
PUT

  
  
  
/api/users/:id

  
  
  
Оновити інформацію користувача

  
 
 
  
  
DELETE

  
  
  
/api/users/:id

  
  
  
Видалити
  користувача

  
 
 
  
  
Бронювання

  
  
  
GET

  
  
  
/api/bookings

  
  
  
Отримати список
  бронювань

  
 
 
  
  
/api/bookings/:id

  
  
  
Отримати
  інформацію про бронювання

  
 
 
  
  
POST

  
  
  
/api/bookings

  
  
  
Створити нове
  бронювання

  
 
 
  
  
PUT

  
  
  
/api/bookings/:id

  
  
  
Оновити
  інформацію бронювання

  
 
 
  
  
DELETE

  
  
  
/api/bookings/:id

  
  
  
Видалити
  бронювання

  
 



 



 



Продовження таблиці 4.1



 
  
  
Сутність

  
  
  
Метод

  
  
  
Посилання

  
  
  
Дія

  
 
 
  
  
 Польоти дронів

  
  
  
GET

  
  
  
/api/drone-flights

  
  
  
Змінити роль
  користувача

  
 
 
  
  
 /api/drone-flights/:id

  
  
  
Отримати інформацію про політ дрона

  
 
 
  
  
POST

  
  
  
/api/drone-flights

  
  
  
Зареєструвати
  новий політ дрона

  
 
 
  
  
PUT

  
  
  
/api/drone-flights/:id

  
  
  
Оновити
  інформацію про політ дрона

  
 
 
  
  
  DELETE

  
  
  
/api/drone-flights/:id

  
  
  
Видалити запис
  про політ дрона

  
 
 
  
  
 Дрони

  
  
  
 GET

  
  
  
/api/drones

  
  
  
Отримати список
  дронів

  
 
 
  
  
/api/drones/:id

  
  
  
Отримати
  інформацію про дрон

  
 
 
  
  
 POST

  
  
  
/api/drones

  
  
  
Додати новий
  дрон

  
 
 
  
  
 PUT

  
  
  
/api/drones/:id

  
  
  
Оновити
  інформацію про дрон

  
 
 
  
  
 DELETE

  
  
  
/api/drones/:id

  
  
  
Видалити дрон

  
 



 



 



 



Продовження таблиці 4.1



 
  
  
Сутність

  
  
  
Метод

  
  
  
Посилання

  
  
  
Дія

  
 
 
  
  
Маршрути

  
  
  
GET

  
  
  
/api/routes

  
  
  
Отримати список маршрутів

  
 
 
  
  
/api/routes/:id

  
  
  
Отримати інформацію про маршрут

  
 
 
  
  
POST

  
  
  
/api/routes

  
  
  
Створити новий
  маршрут

  
 
 
  
  
PUT

  
  
  
/api/routes/:id

  
  
  
Отримати
  інформацію про маршрут

  
 
 
  
  
DELETE

  
  
  
/api/routes/:id

  
  
  
Видалити
  маршрут

  
 



 



 



4.1.1 Створення
API для використання
дронів





 



 



Маршрут /drones (див. рядок 1 розділ А.1 у додатку А) забезпечує функціональність
для створення та керування дронами в системі, що є ключовим аспектом для
моніторингу та контролю повітряних операцій. При отриманні POST-запиту на
/drones, метод створює новий об'єкт дрона на основі даних з тіла запиту,
зберігає новий дрон у базі даних та повертає інформацію про створений дрон з
HTTP-статусом 201.



Цей маршрут також підтримує
GET-запити для отримання списку всіх дронів та інформації про конкретний дрон
за його ідентифікатором. Крім того, передбачені PATCH-запити для оновлення
інформації про дрон та DELETE-запити для видалення дрона з системи. Усі ці
операції забезпечують повний цикл керування дронами в системі.



 



 



4.1.2 Розробка API для
керування операторами дронів



 



 



Маршрут /droneOperators (див. рядок 1 розділ
А.2 у додатку А) відповідає за створення та керування
операторами дронів у системі, що є важливим аспектом для забезпечення безпеки
та ефективності польотів. При отриманні POST-запиту на /droneOperators, метод
створює нового оператора дрона на основі даних з тіла запиту, зберігає нового
оператора в базі даних та повертає інформацію про створеного оператора з
HTTP-статусом 201.



Цей маршрут також підтримує операції
для отримання списку всіх операторів, інформації про конкретного оператора,
оновлення даних оператора та видалення оператора з системи. Такий набір функцій
дозволяє ефективно керувати персоналом, відповідальним за керування дронами.



 



 



4.1.3 Створення API для керування природними умовами



 



 



Маршрути /naturalConditions (див. рядок 1 розділ А.3 у додатку А)
забезпечують функціональність для реєстрації та моніторингу природних умов, що
критично важливо для планування та виконання безпечних польотів дронів. При
отриманні POST-запиту на /naturalConditions, метод створює новий запис про
природні умови на основі даних з тіла запиту, зберігає новий запис у базі даних
та повертає інформацію про створений запис з HTTP-статусом 201.



Цей маршрут також підтримує операції
для отримання списку всіх записів про природні умови, інформації про конкретний
запис, оновлення даних про природні умови та видалення записів із системи. Ця
функціональність дозволяє системі враховувати поточні погодні та інші природні
фактори при плануванні польотів дронів.



 



 



4.2 Архітектура та
розробка IoT частини



 



 



Для реалізації функціональностей IoT
частини системи керування туристичними маршрутами та дронами використано мову
програмування Python. Ця мова обрана через її гнучкість та багату екосистему
бібліотек для роботи з різними типами даних та пристроїв.



Система обробляє дані з різноманітних
джерел, що є критичними для забезпечення безпеки туристів та ефективного
керування дронами. Ці джерела включають GPS-трекери туристів, метеорологічні
датчики, телеметрію дронів та інформацію про стан природних об'єктів. Для збору
даних використовуються спеціалізовані симулятори, які імітують роботу реальних
пристроїв:



-        
GPSTrackerSimulator
симулює дані про місцезнаходження туристів.



-        
WeatherSensorSimulator
відтворює дані про погодні умови, включаючи температуру, вологість та
атмосферний тиск.



-        
DroneTelemeterSimulator
імітує телеметричні дані дронів, такі як висота, швидкість та рівень заряду
батареї.



Взаємодія з сервером здійснюється за
допомогою бібліотеки requests, використовуючи протокол HTTP для обміну даними.
Це забезпечує надійну та безпечну передачу інформації між IoT пристроями та
центральним сервером.



Ключовим компонентом системи є клас
ServerCommunicator, який відповідає за встановлення з'єднання з сервером,
отримання конфігурацій для пристроїв та відправку зібраних даних. Дані
передаються у форматі JSON, що дозволяє структуровано представляти різнорідну
інформацію та забезпечує зручний обмін між IoT пристроями та сервером.



Особлива увага приділена оптимізації
коду для роботи на пристроях з обмеженою обчислювальною потужністю, що є
типовим для IoT середовища. Це забезпечує можливість легкого портування
програми на реальні IoT пристрої, які можуть використовуватися в польових
умовах для моніторингу туристичних маршрутів та керування дронами.



Для аналізу зібраних даних та
генерації оптимальних туристичних маршрутів використовуються алгоритми
машинного навчання, реалізовані за допомогою бібліотеки TensorFlow.js. Це
інноваційне рішення дозволяє виконувати складні обчислення безпосередньо у
браузері користувача, що значно підвищує швидкість реакції системи та зменшує
навантаження на сервер.



Система створена з таких частин:



а)       GPSTrackerSimulator:
симулює роботу GPS-трекера для відстеження місцезнаходження туристів;



б)      WeatherSensorSimulator:
імітує дані про погодні умови в різних точках маршруту;



в)      DroneTelemeterSimulator:
відтворює телеметричні дані дронів для моніторингу їх стану та положення;



г)       ServerCommunicator:
забезпечує комунікацію з сервером, отримання конфігурацій та відправку даних;



ґ)       DeviceConfig: структура даних для
зберігання конфігурацій різних типів пристроїв;



д)      RouteOptimizer:
компонент, що використовує TensorFlow.js для аналізу даних та генерації
оптимальних маршрутів.



Заради відображення використаних
технологій була створена діаграма пакетів (див. рис. 4.1).



 




 




Рисунок 4.1 -
UML діаграма пакетів для IoT частини системи



 



Для демонстрації
взаємодії пристрою з користувачем системи більш детально було розроблено діаграму взаємодії (див. додат.
Б.3). Окрім цього, на основі взаємодії пристрою було побудовано діаграму діяльності
де можно побачити взаємодію пристрою з сервером (див. додат. Б.4).



 



 



 



 



 



4.3 Архітектура
та розробка web частини



 



 



Розробка
веб-інтерфейсу для системи керування туристичними маршрутами та дронами
вимагала ретельного підбору технологій, які б забезпечили оптимальну
продуктивність, інтерактивність та гнучкість. Враховуючи специфіку проекту та
необхідність обробки складних даних у реальному часі, було прийнято рішення
використати сучасний стек технологій на базі React та JavaScript.



Основою
фронтенд-архітектури став React - потужна бібліотека для створення
користувацьких інтерфейсів. Вибір React обумовлений його здатністю ефективно
оновлювати DOM, що критично важливо для відображення динамічних даних з
GPS-трекерів та телеметрії дронів. Використання функціональних компонентів та
хуків, таких як useState та useEffect, дозволило створити чисту та зрозумілу
структуру коду, спростивши управління станом додатка та реалізацію складної
бізнес-логіки.



Для візуалізації
маршрутів та положення дронів на карті було інтегровано бібліотеку Leaflet.js,
яка забезпечує високу продуктивність при роботі з географічними даними. Це
дозволило створити інтерактивні карти з можливістю масштабування та накладання
різних шарів інформації.



Обмін даними між
клієнтською частиною та сервером реалізовано за допомогою бібліотеки Axios.
Вона забезпечує зручний інтерфейс для здійснення HTTP-запитів та обробки
відповідей, що особливо важливо при роботі з потоковими даними від
IoT-пристроїв та дронів.



Архітектурно проект
побудовано за принципом Single Page Application (SPA). Цей підхід дозволяє
створити безшовний користувацький досвід, де навігація та оновлення даних
відбуваються без перезавантаження сторінки. Це особливо важливо для системи
моніторингу в реальному часі, де затримки при оновленні інформації можуть бути
критичними.



Для оптимізації
роботи з великими обсягами даних, які генеруються системою IoT та дронами, було
впроваджено механізми віртуалізації списків та ефективного управління станом
додатка. Це забезпечує плавну роботу інтерфейсу навіть при відображенні
інформації про сотні активних маршрутів та дронів одночасно.



Особлива увага була
приділена розробці адаптивного дизайну, що дозволяє ефективно використовувати
систему як на стаціонарних комп'ютерах, так і на мобільних пристроях. Це
критично важливо для польових операторів, які потребують доступу до системи в
різних умовах.



Інтеграція з
TensorFlow.js для аналізу даних та оптимізації маршрутів дозволила реалізувати
складні алгоритми машинного навчання безпосередньо в браузері. Це значно
підвищило швидкість реакції системи на зміни умов та дозволило впровадити
функції предиктивної аналітики для попередження потенційних ризиків на
маршрутах.



Структура
веб-інтерфейсу проекту детально відображена на діаграмі компонентів, яка
демонструє взаємозв'язки між різними модулями системи та їх функціональне
призначення. Ця діаграма служить важливим інструментом для розуміння
архітектури проекту та полегшує процес його подальшого розвитку та
масштабування..



Для детального
відображення структури веб-інтерфейсу проекту було створено діаграму
компонентів (див. рис. 4.2).



 




 




Рисунок
4.2 - UML діаграма компонентів веб-клієнту системи



 



В контексті демнострації поведінки системи
та її станів, було створено і представлено діаграму станів (див. рис. 4.3). На
цій діаграмі відображені різні стани користувача, включаючи неавторизований, авторизований,
активний, а також інші стани, через які проходить користувач під час роботи в
системі.



 




 




Рисунок
4.3 - UML діаграма станів веб-клієнту системи



 



Для наочного показу всіх можливих дій
користувача в системі була створена діаграма діяльності (див. рис. 4.4). На цій
діаграмі детально відображено, які дії доступні користувачеві та які етапи
необхідно пройти для їх виконання.



 




 




Рисунок
4.4 - UML діаграма діяльності веб-клієнту системи







 



ВИСНОВКИ



 



 



Курсовий проект закінчився створенням передової
програмної системи, призначеної для революціонізації управління туристичними
маршрутами та інтеграції дронів у природоохоронних зонах. Ця розробка стала
результатом ґрунтовного аналізу сучасних викликів туристичної галузі та
застосування інноваційних технологій моніторингу.



В основу проекту лягла
розробка комплексної концептуальної моделі, яка охопила всі аспекти взаємодії
між туристами, операторами та навколишнім середовищем. Ця модель послужила
фундаментом для проектування гнучкої структури даних у MongoDB, що забезпечило
ефективну обробку різноманітної інформації про маршрути, туристів та операції
дронів.



Серверна частина системи,
реалізована на Node.js з використанням Express.js, демонструє високу
продуктивність та здатність до масштабування. Це дозволило створити потужний
RESTful API, здатний обробляти значні обсяги даних у режимі реального часу.
Клієнтський інтерфейс, розроблений на React, надає користувачам інтуїтивно
зрозумілі інструменти для планування маршрутів, моніторингу активності та аналізу
даних.



Особливу увагу було приділено
інтеграції системи керування дронами, що дозволило реалізувати функції точного
контролю та збору телеметрії. Це значно розширило можливості моніторингу та
забезпечення безпеки на туристичних маршрутах.



Розроблена платформа
відкриває нові горизонти в управлінні туристичними потоками, підвищенні безпеки
відвідувачів та захисті природних ресурсів. Вона надає інструменти для
оптимізації маршрутів, прогнозування потенційних ризиків та швидкого реагування
на надзвичайні ситуації. Система також сприяє збалансованому розвитку
туристичної інфраструктури, враховуючи екологічні аспекти та потреби збереження
природи.



Впровадження цієї системи має
потенціал суттєво вплинути на якість туристичних послуг, підвищити рівень
безпеки відвідувачів та сприяти сталому розвитку природних зон відпочинку. Вона
створює міцний фундамент для подальших інновацій у сфері екотуризму та
відповідального природокористування.



Посилання на відеодемонстрацію: https://youtu.be/O7ANUI4EwY4







 



ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ



 



 



1. Node.js Documentation / OpenJS Foundation. URL: https://nodejs.org/en/docs/
(дата звернення: 27.06.2024).



2. MongoDB Documentation / MongoDB, Inc. URL: https://docs.mongodb.com/
(дата звернення: 27.06.2024).



3. React Documentation / Facebook Inc. URL:
https://react.dev/learn (дата звернення: 27.06.2024).



4. Tailwind CSS Documentation / Tailwind Labs. URL:
https://tailwindcss.com/docs (дата звернення: 27.06.2024).



5. TensorFlow.js Documentation / Google LLC. URL:
https://www.tensorflow.org/js/guide (дата звернення: 27.06.2024).



6. React Native Documentation / Facebook Inc. URL:
https://reactnative.dev/docs/getting-started (дата звернення: 27.06.2024).







 



ДОДАТОК А



Код програми



 



 



А.1 Створення API для
використання дронів





 



 



1  const express = require('express');



2  const router = express.Router();



3  const { Drone } = require('../models');



4  router.post('/', async (req, res) => {



5      try {



6          const drone = new Drone(req.body);



7          await drone.save();



8          res.status(201).send(drone);



9      } catch (error) {



10         res.status(400).send(error);



11     }



12 });



13
router.get('/', async (req, res) => {



14     try {



15         const drones = await Drone.find({});



16         res.send(drones);



17     } catch (error) {



18         res.status(500).send(error);



19     }



20 });



21
router.get('/:id', async (req, res) => {



22     try {



23         const drone = await Drone.findById(req.params.id);



24         if (!drone) {



25             return res.status(404).send();



26         }



27         res.send(drone);



28     } catch (error) {



29         res.status(500).send(error);



30     }



31 });



32
router.patch('/:id', async (req, res) => {



33     try {



34         const drone = await
Drone.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators:
true });



35         if (!drone) {



36             return res.status(404).send();



37         }



38         res.send(drone);



39     } catch (error) {



40         res.status(400).send(error);



41     }



42 });



43
router.delete('/:id', async (req, res) => {



44     try {



45         const drone = await
Drone.findByIdAndDelete(req.params.id);



46         if (!drone) {



47             return res.status(404).send();



48         }



49         res.send(drone);



50     } catch (error) {



51         res.status(500).send(error);



52     }



53 });



54 module.exports
= router;



 



А.2 Розробка API для керування
операторами дронів



 



 



1  const express = require('express');



2  const router = express.Router();



3  const { DroneOperator } =
require('../models');



4  router.post('/', async (req, res) => {



5      try {



6          const droneOperator = new
DroneOperator(req.body);



7          await droneOperator.save();



8          res.status(201).send(droneOperator);



9      } catch (error) {



10         res.status(400).send(error);



11     }



12 });



13
router.get('/', async (req, res) => {



14     try {



15         const droneOperators = await
DroneOperator.find({});



16         res.send(droneOperators);



17     } catch (error) {



18         res.status(500).send(error);



19     }



20 });



21
router.get('/:id', async (req, res) => {



22     try {



23         const droneOperator = await
DroneOperator.findById(req.params.id);



24         if (!droneOperator) {



25             return res.status(404).send();



26         }



27         res.send(droneOperator);



28     } catch (error) {



29         res.status(500).send(error);



30     }



31 });



32
router.patch('/:id', async (req, res) => {



33     try {



34         const droneOperator = await
DroneOperator.findByIdAndUpdate(req.params.id, req.body, { new: true,
runValidators: true });



35         if (!droneOperator) {



36             return res.status(404).send();



37         }



38         res.send(droneOperator);



39     } catch (error) {



40         res.status(400).send(error);



41     }



42 });



43
router.delete('/:id', async (req, res) => {



44     try {



45         const droneOperator = await
DroneOperator.findByIdAndDelete(req.params.id);



46         if (!droneOperator) {



47             return res.status(404).send();



48         }



49         res.send(droneOperator);



50     } catch (error) {



51         res.status(500).send(error);



52     }



53 });



54 module.exports
= router;



 



 



А.3 Створення API для керування природними умовами



 



 



1  const express = require('express');



2  const router = express.Router();



3  const { NaturalCondition } =
require('../models');



4  router.post('/', async (req, res) => {



5      try {



6          const naturalCondition = new
NaturalCondition(req.body);



7          await naturalCondition.save();



8         
res.status(201).send(naturalCondition);



9      } catch (error) {



10         res.status(400).send(error);



11     }



12 });



13
router.get('/', async (req, res) => {



14     try {



15         const naturalConditions = await
NaturalCondition.find({});



16         res.send(naturalConditions);



17     } catch (error) {



18         res.status(500).send(error);



19     }



20 });



21
router.get('/:id', async (req, res) => {



22     try {



23         const naturalCondition = await
NaturalCondition.findById(req.params.id);



24         if (!naturalCondition) {



25             return res.status(404).send();



26         }



27         res.send(naturalCondition);



28     } catch (error) {



29         res.status(500).send(error);



30     }



31 });



32
router.patch('/:id', async (req, res) => {



33     try {



34         const naturalCondition = await
NaturalCondition.findByIdAndUpdate(req.params.id, req.body, { new: true,
runValidators: true });



35         if (!naturalCondition) {



36             return res.status(404).send();



37         }



38         res.send(naturalCondition);



39     } catch (error) {



40         res.status(400).send(error);



41     }



42 });



43
router.delete('/:id', async (req, res) => {



44     try {



45         const naturalCondition = await
NaturalCondition.findByIdAndDelete(req.params.id);



46         if (!naturalCondition) {



47             return res.status(404).send();



48         }



49         res.send(naturalCondition);



50     } catch (error) {



51         res.status(500).send(error);



52     }



53 });



54 module.exports
= router;










ДОДАТОК Б



Діаграми



 




 




Рисунок Б.1 – ER модель даних



 




 




Рисунок Б.2 - UML діаграма
прецедентів



 




 




Рисунок Б.3 – Діаграма взаємодії
для IoT частини системи



 




 




Рисунок Б.4 - Діаграма діяльності для IoT частини системи


